name: Render documentation

# see https://github.com/actions/setup-python#using-setup-python-with-a-self-hosted-runner
# for artifact handling and SBOM: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts

on:
  push:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"

jobs:
  test-matrix:
    name: "Core py${{ matrix.python-version }} sphinx~=${{ matrix.sphinx-version }} ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Set on "false" to get the results of ALL builds
      matrix:
        #os: ["ubuntu-latest", "windows-latest", "macos-latest",]
        os: ["ubuntu-latest",]
        python: ["3.10", "3.11", "3.12", "3.13",]
        sphinx: ["7.4", "8.0", "8.1", "8.2"]
        exclude:
        - python: "3.10"
          sphinx: "8.2"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: print versions for debugging
        run: python --version ; pip --version ; whoami
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools
          python -m pip install sphinx~=${{ matrix.sphinx }}
          python -m pip install -r ./tests/requirements.txt
          python -m pip install .
      - name: Test with pytest
        run: >
          coverage run
          --branch
          --data-file=./public/coverage.${{matrix.os}}-${{matrix.python}}-${{matrix.sphinx}}.file
          -m pytest
          ./tests/
          --junitxml=./public/test_results.${{matrix.os}}-${{matrix.python}}-${{matrix.sphinx}}.xml
          --report-log=./public/test_log.${{matrix.os}}-${{matrix.python}}-${{matrix.sphinx}}.json
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{matrix.os}}-${{matrix.python}}-${{matrix.sphinx}}
          path: |
            ./public
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  merge-test-results:
    runs-on: ubuntu-latest
    needs: test-matrix
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3"
      - name: print versions for debugging
        run: python --version ; pip --version ; whoami
      - name: Install dependencies
        run: |
          python -m pip install junitparser
          python -m pip install coverage
          junitparser --version
          coverage --version
      - name: Download test-results
        uses: actions/download-artifact@v4
        with:
          path: public
          pattern: test-results-*
      - name: Print test-result folder
        run: |
          ls -R public
      - name: Merge coverage files
        run: >
          coverage combine
          --data-file=coverage.
          --keep
      - name: Merge test-result xml
        run: |
          junitparser merge ./public/test_results.*.xml ./public/test_results.merged.xml
      - name: Print test-result folder 2
        run: |
          ls -R public
      - name: Archive merged test-results
        uses: actions/upload-artifact@v4
        with:
          name: merged-test-results
          path: |
            ./public
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}


  build:
    runs-on: ubuntu-latest
    needs: merge-test-results
    if: False
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3"
        cache: 'pip' # caching pip dependencies
    - name: print versions for debugging
      run: python --version ; pip --version ; whoami
    - name: Install graphviz & default-jdk
      run: sudo apt-get install graphviz default-jdk
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install setuptools
        python -m pip install -r ./docs/requirements.txt
        python -m pip install -r ./tests/requirements.txt
        python -m pip install .
    - name: Test with pytest
      run: >
        coverage run
        --branch
        --data-file=./docs/_static/_external_data/coverage.file
        -m pytest
        ./tests/
        --junitxml=./docs/_static/_external_data/test_results.xml
        --report-log=./docs/_static/_external_data/test_log.json
    - name: Archive pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results
        path: |
          ./docs/_static/_external_data/test_results.xml
          ./docs/_static/_external_data/test_log.json
          ./docs/_static/_external_data/pytest-logs.txt
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: extract data from test coverage.file
      run: |
        coverage xml  --data-file=./docs/_static/_external_data/coverage.file -o ./docs/_static/_external_data/coverage.xml
        coverage json --data-file=./docs/_static/_external_data/coverage.file -o ./docs/_static/_external_data/coverage.json
        coverage html --data-file=./docs/_static/_external_data/coverage.file -d ./docs/_static/_external_data/coverage_html
    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: |
          ./docs/_static/_external_data/coverage.file
          ./docs/_static/_external_data/coverage.xml
          ./docs/_static/_external_data/coverage.json
          ./docs/_static/_external_data/coverage_html
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: Render the documentation
      run: >
        sphinx-build
        -b html ./docs ./public
        --jobs=auto
        --show-traceback
        --keep-going
      #--fail-on-warning
      if: ${{ always() }}
    - name: Archive generate documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: |
          ./public
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_name == github.event.repository.default_branch
    steps:
      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: ./public/
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
